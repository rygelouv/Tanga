package app.books.tanga.feature.library

import app.books.tanga.data.favorite.FavoriteRepository
import app.books.tanga.data.preferences.DefaultPrefDataStoreRepository
import app.books.tanga.entity.Favorite
import app.books.tanga.entity.FavoriteId
import app.books.tanga.entity.Summary
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.flowOf
import javax.inject.Inject

class FavoriteInteractor @Inject constructor(
    private val favoriteRepository: FavoriteRepository,
    private val prefDataStoreRepository: DefaultPrefDataStoreRepository
) {
    suspend fun getFavorites(): Result<List<Favorite>> {
        return runCatching {
            val userId = getUserId() ?: return Result.success(emptyList())
            return favoriteRepository.getFavorites(userId) // TODO double check this
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    /**
     * Observe changes to the favorites for the current user
     */
    suspend fun observeFavorites(): Flow<List<Favorite>> {
        val userId = getUserId() ?: return flowOf(emptyList())
        return favoriteRepository.getFavoritesStream(userId)
    }

    /**
     * Get the user id from the preference stored session
     */
    private suspend fun getUserId(): String? {
        val sessionId = prefDataStoreRepository.getSessionId().first()
        return sessionId?.value
    }

    /**
     * Check if a given summary is a favorite.
     */
    suspend fun isFavorite(summaryId: String): Result<Boolean> {
        val userId = getUserId() ?: return Result.success(false)
        return runCatching {
            val favorite =
                favoriteRepository.getFavoriteBySummaryId(summaryId = summaryId, userId = userId)
                    .getOrThrow()
            return Result.success(favorite != null)
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    /**
     * Get the user id, then create the favorite with the given summary
     * [Favorite.id] is provided empty and will be generated and updated after creation by
     * the remote storage system.
     */
    suspend fun createFavorite(summary: Summary): Result<Unit> {
        return runCatching {
            val userId = getUserId() ?: return Result.failure(Throwable("User not logged in"))
            return favoriteRepository.createFavorite(
                favorite = Favorite(
                    id = FavoriteId(""), // will be generated by Firestore and updated after creation
                    title = summary.title,
                    author = summary.author,
                    coverUrl = summary.coverImageUrl,
                    userId = userId,
                    summaryId = summary.id.value,
                    playingLength = summary.playingLength
                )
            )
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    suspend fun deleteFavoriteBySummaryId(summaryId: String): Result<Unit> {
        val userId = getUserId() ?: return Result.failure(Throwable("User not logged in"))
        return runCatching {
            val favorite =
                favoriteRepository.getFavoriteBySummaryId(summaryId = summaryId, userId = userId)
                    .getOrThrow()
            if (favorite != null) {
                favoriteRepository.deleteFavorite(favorite)
            } else {
                Result.failure<Throwable>(Throwable("Favorite not found"))
            }
        }
    }
}