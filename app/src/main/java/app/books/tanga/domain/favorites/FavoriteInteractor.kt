package app.books.tanga.domain.favorites

import app.books.tanga.data.FavoriteRepository
import app.books.tanga.data.preferences.DefaultPrefDataStoreRepository
import app.books.tanga.domain.summary.Summary
import kotlinx.coroutines.flow.first
import javax.inject.Inject

class FavoriteInteractor @Inject constructor(
    private val favoriteRepository: FavoriteRepository,
    private val prefDataStoreRepository: DefaultPrefDataStoreRepository
) {
    suspend fun getFavorites(): Result<List<Favorite>> {
        return runCatching {
            val userId = getUserId().getOrThrow()
            return favoriteRepository.getFavorites(userId) // TODO double check this
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    /**
     * Get the user id from the preference stored session
     */
    private suspend fun getUserId(): Result<String> {
        val sessionId = prefDataStoreRepository.getSessionId().first()
        val userId = sessionId?.value ?: return Result.failure(
            Throwable("Session Id not found in pref datastore") // TODO create custom error
        )
        return Result.success(userId)
    }

    /**
     * Check if a given summary is a favorite.
     */
    suspend fun isFavorite(summaryId: String): Result<Boolean> {
        return runCatching {
            val favorite = favoriteRepository.getFavoriteBySummaryId(summaryId).getOrThrow()
            return Result.success(favorite != null)
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    /**
     * Get the user id, then create the favorite with the given summary
     * [Favorite.uid] is provided empty and will be generated and updated after creation by
     * the remote storage system.
     */
    suspend fun createFavorite(summary: Summary): Result<Unit> {
        return runCatching {
            val userId = getUserId().getOrThrow()
            return favoriteRepository.createFavorite(
                favorite = Favorite(
                    uid = "", // will be generated by Firestore and updated after creation
                    title = summary.title,
                    author = summary.author,
                    coverUrl = summary.coverImageUrl,
                    userId = userId,
                    summaryId = summary.slug,
                    playingLength = summary.playingLength
                )
            )
        }.onFailure {
            Result.failure<Throwable>(it)
        }
    }

    suspend fun deleteFavoriteBySummaryId(summaryId: String): Result<Unit> {
        return runCatching {
            val favorite = favoriteRepository.getFavoriteBySummaryId(summaryId).getOrThrow()
            if (favorite != null) {
                favoriteRepository.deleteFavorite(favorite)
            } else {
                Result.failure<Throwable>(Throwable("Favorite not found"))
            }
        }
    }
}