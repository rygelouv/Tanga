package app.books.tanga.domain.favorites

import app.books.tanga.data.FavoriteRepository
import app.books.tanga.data.preferences.DefaultPrefDataStoreRepository
import app.books.tanga.domain.summary.Summary
import kotlinx.coroutines.flow.first
import javax.inject.Inject

class FavoriteInteractor @Inject constructor(
    private val favoriteRepository: FavoriteRepository,
    private val prefDataStoreRepository: DefaultPrefDataStoreRepository
) {
    suspend fun getFavorites(userId: String): Result<List<Favorite>> {
        return favoriteRepository.getFavorites(userId)
    }

    suspend fun isFavorite(summaryId: String): Result<Boolean> {
        val sessionId = prefDataStoreRepository.getSessionId().first()
        val userId = sessionId?.value ?: return Result.failure(
            Throwable("Session Id not found in pref datastore") // TODO create custom error
        )
        val favoritesResult = favoriteRepository.getFavorites(userId)
        return favoritesResult.map { favorites ->
            favorites.any { it.summaryId == summaryId }
        }
    }

    suspend fun createFavorite(summary: Summary): Result<Unit> {
        val sessionId = prefDataStoreRepository.getSessionId().first()
        val userId = sessionId?.value ?: return Result.failure(
            Throwable("Session Id not found in pref datastore") // TODO create custom error
        )
        return favoriteRepository.createFavorite(
            Favorite(
                uid = "", // will be generated by Firestore and updated after creation
                title = summary.title,
                author = summary.author,
                coverUrl = summary.coverImageUrl,
                userId = userId,
                summaryId = summary.slug,
                playingLength = summary.playingLength
            )
        )
    }

    suspend fun deleteFavoriteBySummaryId(summaryId: String): Result<Unit> {
        return runCatching {
            val favorite = favoriteRepository.getFavoriteFromCacheBySummerId(summaryId)
            if (favorite != null) {
                favoriteRepository.deleteFavorite(favorite)
            } else {
                Result.failure<Throwable>(Throwable("Favorite not found in cache"))
            }
        }
    }
}